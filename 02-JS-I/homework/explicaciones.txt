	* Variables: Podríamos decir y pensar que son como cajas, en dónde vamos guardando distintas cosas. Podemos guardar distintos valores. Y justamente son variables, porque pueden ir tomando distintos valores a lo largo de nuestro programa, es decir, guardar distintas cosas en esas cajas. Estos distintos valores deben ser siempre del mismo tipo de valor, es decir, si uso una variable para contener texto, aunque cambie su valor (lo que guardo adentro), ese valor va a seguir siendo un texto. Por ejemplo, puedo tener una variable (la llamo "var_suma")que guarde la suma de dos números: a y b. Si a=1 y b=2, entonces en esa variable var_suma voy a guardar en ese momento el número 3. Pero si cambio el valor de a o de b, por ejemplo a=2 y b=3, esa variable ahora tendría que guardar el número 5. Entonces, cambia el valor, pero sigue siendo un número. A diferencia de una "constante", cuyo valor se mantiene igual durante todo el programa.
	* Strings: Los string son caracteres, o dicho de otra forma, texto. Pueden ser un caracter (una sóla letra), o muchos enlazados, formando palabras, y ¡hasta oraciones!.
	* Funciones (argumentos, `return`): Una función es una especie de proceso, que SIEMPRE devuelve un valor. Igual que en matemática, cuando hablamos de funciones, pensamos en que le pasamos un valor, hace "algo" con ese valor, y nos devuelve otro. Por ejemplo f(x)= x + 2, si x =1, "agarra" el 1, (que sería el valor de x), le suma 2 (la "cosa" que hace) y nos devuelve un valor: "3", ya que hizo 1 + 2. Ese valor que "le pasamos", que "agarra", se llama "argumento". Y ese valor que nos "devuelve", después de "hacer esa cosa que hace", se llama "return". Por supuesto, esa "cosa que hace", no es mágica, sino que es lo que vamos a escribir nosotros como definición de esa función. Por eso tenemos que tener muy claro que valor/es queremos recibir (argumento) y que valor/es queremos que devuelva (return), para poder pensar y definir esa función. El "valor" de ese argumento puede ir cambiando, en nuestro ejemplo, la x valía 1, pero, justamente, escribimos "x", para que ese valor pueda cambiar (en este caso x es una "variable").
	* Declaraciones `if`: Los "if" o "si" (en castellano), es la forma que tenemos de tomar decisiones en un programa. Siempre tenemos que tener una "codición", es decir, un punto de partida. Entonces podemos pensar "si pasa tal cosa, pasa tal otra". También podemos pensar en el contrario, es decir, que pasa si "no pasa tal cosa". Por ejemplo, puedo pensar "si llueve" (condición) "voy a mirar videos de YouTube" (lo que voy a hacer si está lloviendo, es decir, si la codición se cumple, si es "verdadera"). Pero acá no estoy diciendo nada acerca de que pasa si no llueve (si la condición no se cumple, o es "falsa"). Acá puedo decir "si no, voy a salir con mis amigos". Juntando todo, nos quedaría "Si llueve, voy a mirar videos de YouTube, si no (si no llueve) voy a salir con mis amigos". No siempre debemos decir ese "si no". También podemos partir de una condición que sea falsa, por ejemplo, decir "si no llueve, voy a salir con mis amigos", y no digo nada de que pasaría si llueve. 
	* Valores booleanos (`true`, `false`): Se acuerdan que antes dije "si la condición se cumple", dije "es verdadera"?... Entonces... ¿cuántas posibilidades tengo para evaluar una condición?... sólo dos: o es verdadera, o es falsa. No tengo más opciones. Y estas opciones nunca se pueden dar las dos a la vez, es decir, no puede ser "verdadero" y "falso". Tengo que elegir si o sí una de esas. Alguien, un matemático llamado "Bool", definió esto, por eso se los llama valores "Booleanos". En programación usamos "True" para verdadero, y "False" para falso. Este concepto es fundamental en Ciencias de la Computación, ya que define su base. Mediante el sistema binario (0 y 1), marcando el 1 como una seña, y el 0 como ausencia de señal. Generalmente se asocia el True con el 1, y el False con con el 0. Otra cosa importante de estos valores es que mediante la "negación" podemos convertir cada uno en su contrario. Si algo es Verdadero, entonces, la negación de esto (o contrario) es Falso. Al revés vale  lo mismo: si algo es Falso, y lo  niego (hago lo contrario) obtengo algo Verdadero. Esta es una operación que puedo hacer, hay más, y todas tienen que ver con los "Conjuntos" que definió Bool.